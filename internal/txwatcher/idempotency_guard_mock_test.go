// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package txwatcher

import (
	"context"
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewIdempotencyGuardMock creates a new instance of IdempotencyGuardMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIdempotencyGuardMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *IdempotencyGuardMock {
	mock := &IdempotencyGuardMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// IdempotencyGuardMock is an autogenerated mock type for the IdempotencyGuard type
type IdempotencyGuardMock struct {
	mock.Mock
}

type IdempotencyGuardMock_Expecter struct {
	mock *mock.Mock
}

func (_m *IdempotencyGuardMock) EXPECT() *IdempotencyGuardMock_Expecter {
	return &IdempotencyGuardMock_Expecter{mock: &_m.Mock}
}

// ClaimBlockForTxWatch provides a mock function for the type IdempotencyGuardMock
func (_mock *IdempotencyGuardMock) ClaimBlockForTxWatch(ctx context.Context, network string, blockHash string, ttl time.Duration) error {
	ret := _mock.Called(ctx, network, blockHash, ttl)

	if len(ret) == 0 {
		panic("no return value specified for ClaimBlockForTxWatch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, time.Duration) error); ok {
		r0 = returnFunc(ctx, network, blockHash, ttl)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// IdempotencyGuardMock_ClaimBlockForTxWatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClaimBlockForTxWatch'
type IdempotencyGuardMock_ClaimBlockForTxWatch_Call struct {
	*mock.Call
}

// ClaimBlockForTxWatch is a helper method to define mock.On call
//   - ctx context.Context
//   - network string
//   - blockHash string
//   - ttl time.Duration
func (_e *IdempotencyGuardMock_Expecter) ClaimBlockForTxWatch(ctx interface{}, network interface{}, blockHash interface{}, ttl interface{}) *IdempotencyGuardMock_ClaimBlockForTxWatch_Call {
	return &IdempotencyGuardMock_ClaimBlockForTxWatch_Call{Call: _e.mock.On("ClaimBlockForTxWatch", ctx, network, blockHash, ttl)}
}

func (_c *IdempotencyGuardMock_ClaimBlockForTxWatch_Call) Run(run func(ctx context.Context, network string, blockHash string, ttl time.Duration)) *IdempotencyGuardMock_ClaimBlockForTxWatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 time.Duration
		if args[3] != nil {
			arg3 = args[3].(time.Duration)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *IdempotencyGuardMock_ClaimBlockForTxWatch_Call) Return(err error) *IdempotencyGuardMock_ClaimBlockForTxWatch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *IdempotencyGuardMock_ClaimBlockForTxWatch_Call) RunAndReturn(run func(ctx context.Context, network string, blockHash string, ttl time.Duration) error) *IdempotencyGuardMock_ClaimBlockForTxWatch_Call {
	_c.Call.Return(run)
	return _c
}

// MarkBlockTxWatchComplete provides a mock function for the type IdempotencyGuardMock
func (_mock *IdempotencyGuardMock) MarkBlockTxWatchComplete(ctx context.Context, network string, blockHash string) error {
	ret := _mock.Called(ctx, network, blockHash)

	if len(ret) == 0 {
		panic("no return value specified for MarkBlockTxWatchComplete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, network, blockHash)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// IdempotencyGuardMock_MarkBlockTxWatchComplete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkBlockTxWatchComplete'
type IdempotencyGuardMock_MarkBlockTxWatchComplete_Call struct {
	*mock.Call
}

// MarkBlockTxWatchComplete is a helper method to define mock.On call
//   - ctx context.Context
//   - network string
//   - blockHash string
func (_e *IdempotencyGuardMock_Expecter) MarkBlockTxWatchComplete(ctx interface{}, network interface{}, blockHash interface{}) *IdempotencyGuardMock_MarkBlockTxWatchComplete_Call {
	return &IdempotencyGuardMock_MarkBlockTxWatchComplete_Call{Call: _e.mock.On("MarkBlockTxWatchComplete", ctx, network, blockHash)}
}

func (_c *IdempotencyGuardMock_MarkBlockTxWatchComplete_Call) Run(run func(ctx context.Context, network string, blockHash string)) *IdempotencyGuardMock_MarkBlockTxWatchComplete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *IdempotencyGuardMock_MarkBlockTxWatchComplete_Call) Return(err error) *IdempotencyGuardMock_MarkBlockTxWatchComplete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *IdempotencyGuardMock_MarkBlockTxWatchComplete_Call) RunAndReturn(run func(ctx context.Context, network string, blockHash string) error) *IdempotencyGuardMock_MarkBlockTxWatchComplete_Call {
	_c.Call.Return(run)
	return _c
}
