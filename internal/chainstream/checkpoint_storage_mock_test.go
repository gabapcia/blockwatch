// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package chainstream

import (
	"context"

	"github.com/gabapcia/blockwatch/internal/pkg/types"
	mock "github.com/stretchr/testify/mock"
)

// NewCheckpointStorageMock creates a new instance of CheckpointStorageMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCheckpointStorageMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *CheckpointStorageMock {
	mock := &CheckpointStorageMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// CheckpointStorageMock is an autogenerated mock type for the CheckpointStorage type
type CheckpointStorageMock struct {
	mock.Mock
}

type CheckpointStorageMock_Expecter struct {
	mock *mock.Mock
}

func (_m *CheckpointStorageMock) EXPECT() *CheckpointStorageMock_Expecter {
	return &CheckpointStorageMock_Expecter{mock: &_m.Mock}
}

// LoadLatestCheckpoint provides a mock function for the type CheckpointStorageMock
func (_mock *CheckpointStorageMock) LoadLatestCheckpoint(ctx context.Context, network string) (types.Hex, error) {
	ret := _mock.Called(ctx, network)

	if len(ret) == 0 {
		panic("no return value specified for LoadLatestCheckpoint")
	}

	var r0 types.Hex
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (types.Hex, error)); ok {
		return returnFunc(ctx, network)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) types.Hex); ok {
		r0 = returnFunc(ctx, network)
	} else {
		r0 = ret.Get(0).(types.Hex)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, network)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// CheckpointStorageMock_LoadLatestCheckpoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadLatestCheckpoint'
type CheckpointStorageMock_LoadLatestCheckpoint_Call struct {
	*mock.Call
}

// LoadLatestCheckpoint is a helper method to define mock.On call
//   - ctx context.Context
//   - network string
func (_e *CheckpointStorageMock_Expecter) LoadLatestCheckpoint(ctx interface{}, network interface{}) *CheckpointStorageMock_LoadLatestCheckpoint_Call {
	return &CheckpointStorageMock_LoadLatestCheckpoint_Call{Call: _e.mock.On("LoadLatestCheckpoint", ctx, network)}
}

func (_c *CheckpointStorageMock_LoadLatestCheckpoint_Call) Run(run func(ctx context.Context, network string)) *CheckpointStorageMock_LoadLatestCheckpoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *CheckpointStorageMock_LoadLatestCheckpoint_Call) Return(hex types.Hex, err error) *CheckpointStorageMock_LoadLatestCheckpoint_Call {
	_c.Call.Return(hex, err)
	return _c
}

func (_c *CheckpointStorageMock_LoadLatestCheckpoint_Call) RunAndReturn(run func(ctx context.Context, network string) (types.Hex, error)) *CheckpointStorageMock_LoadLatestCheckpoint_Call {
	_c.Call.Return(run)
	return _c
}

// SaveCheckpoint provides a mock function for the type CheckpointStorageMock
func (_mock *CheckpointStorageMock) SaveCheckpoint(ctx context.Context, network string, height types.Hex) error {
	ret := _mock.Called(ctx, network, height)

	if len(ret) == 0 {
		panic("no return value specified for SaveCheckpoint")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, types.Hex) error); ok {
		r0 = returnFunc(ctx, network, height)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// CheckpointStorageMock_SaveCheckpoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveCheckpoint'
type CheckpointStorageMock_SaveCheckpoint_Call struct {
	*mock.Call
}

// SaveCheckpoint is a helper method to define mock.On call
//   - ctx context.Context
//   - network string
//   - height types.Hex
func (_e *CheckpointStorageMock_Expecter) SaveCheckpoint(ctx interface{}, network interface{}, height interface{}) *CheckpointStorageMock_SaveCheckpoint_Call {
	return &CheckpointStorageMock_SaveCheckpoint_Call{Call: _e.mock.On("SaveCheckpoint", ctx, network, height)}
}

func (_c *CheckpointStorageMock_SaveCheckpoint_Call) Run(run func(ctx context.Context, network string, height types.Hex)) *CheckpointStorageMock_SaveCheckpoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 types.Hex
		if args[2] != nil {
			arg2 = args[2].(types.Hex)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *CheckpointStorageMock_SaveCheckpoint_Call) Return(err error) *CheckpointStorageMock_SaveCheckpoint_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *CheckpointStorageMock_SaveCheckpoint_Call) RunAndReturn(run func(ctx context.Context, network string, height types.Hex) error) *CheckpointStorageMock_SaveCheckpoint_Call {
	_c.Call.Return(run)
	return _c
}
