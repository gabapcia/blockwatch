// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package retrytest

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewRetry creates a new instance of Retry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRetry(t interface {
	mock.TestingT
	Cleanup(func())
}) *Retry {
	mock := &Retry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Retry is an autogenerated mock type for the Retry type
type Retry struct {
	mock.Mock
}

type Retry_Expecter struct {
	mock *mock.Mock
}

func (_m *Retry) EXPECT() *Retry_Expecter {
	return &Retry_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function for the type Retry
func (_mock *Retry) Execute(ctx context.Context, operation func() error) error {
	ret := _mock.Called(ctx, operation)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, func() error) error); ok {
		r0 = returnFunc(ctx, operation)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Retry_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type Retry_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - operation func() error
func (_e *Retry_Expecter) Execute(ctx interface{}, operation interface{}) *Retry_Execute_Call {
	return &Retry_Execute_Call{Call: _e.mock.On("Execute", ctx, operation)}
}

func (_c *Retry_Execute_Call) Run(run func(ctx context.Context, operation func() error)) *Retry_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 func() error
		if args[1] != nil {
			arg1 = args[1].(func() error)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Retry_Execute_Call) Return(err error) *Retry_Execute_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Retry_Execute_Call) RunAndReturn(run func(ctx context.Context, operation func() error) error) *Retry_Execute_Call {
	_c.Call.Return(run)
	return _c
}
