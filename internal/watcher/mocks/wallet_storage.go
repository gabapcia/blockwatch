// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/gabapcia/blockwatch/internal/watcher"
	mock "github.com/stretchr/testify/mock"
)

// NewWalletStorage creates a new instance of WalletStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWalletStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *WalletStorage {
	mock := &WalletStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// WalletStorage is an autogenerated mock type for the WalletStorage type
type WalletStorage struct {
	mock.Mock
}

type WalletStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *WalletStorage) EXPECT() *WalletStorage_Expecter {
	return &WalletStorage_Expecter{mock: &_m.Mock}
}

// GetTransactionsByWallet provides a mock function for the type WalletStorage
func (_mock *WalletStorage) GetTransactionsByWallet(ctx context.Context, network string, txs []watcher.Transaction) (map[string][]string, error) {
	ret := _mock.Called(ctx, network, txs)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionsByWallet")
	}

	var r0 map[string][]string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []watcher.Transaction) (map[string][]string, error)); ok {
		return returnFunc(ctx, network, txs)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []watcher.Transaction) map[string][]string); ok {
		r0 = returnFunc(ctx, network, txs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, []watcher.Transaction) error); ok {
		r1 = returnFunc(ctx, network, txs)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// WalletStorage_GetTransactionsByWallet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionsByWallet'
type WalletStorage_GetTransactionsByWallet_Call struct {
	*mock.Call
}

// GetTransactionsByWallet is a helper method to define mock.On call
//   - ctx context.Context
//   - network string
//   - txs []watcher.Transaction
func (_e *WalletStorage_Expecter) GetTransactionsByWallet(ctx interface{}, network interface{}, txs interface{}) *WalletStorage_GetTransactionsByWallet_Call {
	return &WalletStorage_GetTransactionsByWallet_Call{Call: _e.mock.On("GetTransactionsByWallet", ctx, network, txs)}
}

func (_c *WalletStorage_GetTransactionsByWallet_Call) Run(run func(ctx context.Context, network string, txs []watcher.Transaction)) *WalletStorage_GetTransactionsByWallet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []watcher.Transaction
		if args[2] != nil {
			arg2 = args[2].([]watcher.Transaction)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *WalletStorage_GetTransactionsByWallet_Call) Return(stringToStrings map[string][]string, err error) *WalletStorage_GetTransactionsByWallet_Call {
	_c.Call.Return(stringToStrings, err)
	return _c
}

func (_c *WalletStorage_GetTransactionsByWallet_Call) RunAndReturn(run func(ctx context.Context, network string, txs []watcher.Transaction) (map[string][]string, error)) *WalletStorage_GetTransactionsByWallet_Call {
	_c.Call.Return(run)
	return _c
}
