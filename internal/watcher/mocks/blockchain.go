// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/gabapcia/blockwatch/internal/pkg/types"
	"github.com/gabapcia/blockwatch/internal/watcher"
	mock "github.com/stretchr/testify/mock"
)

// NewBlockchain creates a new instance of Blockchain. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlockchain(t interface {
	mock.TestingT
	Cleanup(func())
}) *Blockchain {
	mock := &Blockchain{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Blockchain is an autogenerated mock type for the Blockchain type
type Blockchain struct {
	mock.Mock
}

type Blockchain_Expecter struct {
	mock *mock.Mock
}

func (_m *Blockchain) EXPECT() *Blockchain_Expecter {
	return &Blockchain_Expecter{mock: &_m.Mock}
}

// FetchBlockByHeight provides a mock function for the type Blockchain
func (_mock *Blockchain) FetchBlockByHeight(ctx context.Context, height types.Hex) (watcher.Block, error) {
	ret := _mock.Called(ctx, height)

	if len(ret) == 0 {
		panic("no return value specified for FetchBlockByHeight")
	}

	var r0 watcher.Block
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.Hex) (watcher.Block, error)); ok {
		return returnFunc(ctx, height)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.Hex) watcher.Block); ok {
		r0 = returnFunc(ctx, height)
	} else {
		r0 = ret.Get(0).(watcher.Block)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, types.Hex) error); ok {
		r1 = returnFunc(ctx, height)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Blockchain_FetchBlockByHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchBlockByHeight'
type Blockchain_FetchBlockByHeight_Call struct {
	*mock.Call
}

// FetchBlockByHeight is a helper method to define mock.On call
//   - ctx context.Context
//   - height types.Hex
func (_e *Blockchain_Expecter) FetchBlockByHeight(ctx interface{}, height interface{}) *Blockchain_FetchBlockByHeight_Call {
	return &Blockchain_FetchBlockByHeight_Call{Call: _e.mock.On("FetchBlockByHeight", ctx, height)}
}

func (_c *Blockchain_FetchBlockByHeight_Call) Run(run func(ctx context.Context, height types.Hex)) *Blockchain_FetchBlockByHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 types.Hex
		if args[1] != nil {
			arg1 = args[1].(types.Hex)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Blockchain_FetchBlockByHeight_Call) Return(block watcher.Block, err error) *Blockchain_FetchBlockByHeight_Call {
	_c.Call.Return(block, err)
	return _c
}

func (_c *Blockchain_FetchBlockByHeight_Call) RunAndReturn(run func(ctx context.Context, height types.Hex) (watcher.Block, error)) *Blockchain_FetchBlockByHeight_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function for the type Blockchain
func (_mock *Blockchain) Subscribe(ctx context.Context, fromHeight types.Hex) (<-chan watcher.BlockchainEvent, error) {
	ret := _mock.Called(ctx, fromHeight)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 <-chan watcher.BlockchainEvent
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.Hex) (<-chan watcher.BlockchainEvent, error)); ok {
		return returnFunc(ctx, fromHeight)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.Hex) <-chan watcher.BlockchainEvent); ok {
		r0 = returnFunc(ctx, fromHeight)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan watcher.BlockchainEvent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, types.Hex) error); ok {
		r1 = returnFunc(ctx, fromHeight)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Blockchain_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type Blockchain_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - ctx context.Context
//   - fromHeight types.Hex
func (_e *Blockchain_Expecter) Subscribe(ctx interface{}, fromHeight interface{}) *Blockchain_Subscribe_Call {
	return &Blockchain_Subscribe_Call{Call: _e.mock.On("Subscribe", ctx, fromHeight)}
}

func (_c *Blockchain_Subscribe_Call) Run(run func(ctx context.Context, fromHeight types.Hex)) *Blockchain_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 types.Hex
		if args[1] != nil {
			arg1 = args[1].(types.Hex)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Blockchain_Subscribe_Call) Return(blockchainEventCh <-chan watcher.BlockchainEvent, err error) *Blockchain_Subscribe_Call {
	_c.Call.Return(blockchainEventCh, err)
	return _c
}

func (_c *Blockchain_Subscribe_Call) RunAndReturn(run func(ctx context.Context, fromHeight types.Hex) (<-chan watcher.BlockchainEvent, error)) *Blockchain_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}
